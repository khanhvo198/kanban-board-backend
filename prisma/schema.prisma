// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String?
  password        String
  confirmPassword String?
  member          Member[]
  assignee        Assignee[]
}

model Member {
  id          String  @id @default(uuid())
  userId      String  
  information User    @relation(fields: [userId], references: [id])
  role        Role    @default(USER)
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
}

model Assignee {
  id          String  @id @default(uuid())
  userId      String
  information User    @relation(fields: [userId], references: [id])
  taskId      String
  task        Task @relation(fields: [taskId], references: [id])
}


enum Role {
  ADMIN
  USER
}

model Project {
  id          String    @id @default(uuid())
  name        String
  tasks       Task[]
  members     Member[]
  tags        Tag[]
  statuses    Status[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Status {
    id          String @id @default(uuid())
    name        String
    projectId   String
    project     Project   @relation(fields: [projectId], references: [id])
    tasks       Task[]
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String
  assignees    Assignee[]
  due          DateTime
  tags         TagsOnTasks[]
  status       Status   @relation(fields: [statusId], references: [id])
  statusId     String
  subTasks     SubTask[]
  files        File[]
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id])
  comments     Comment[]
}

model Tag {
  id          String @id @default(uuid())
  name        String
  colorScheme String?
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
  tasks       TagsOnTasks[]
}

model TagsOnTasks {
  tag         Tag @relation(fields: [tagId], references: [id])
  tagId       String  
  taskId      String
  task        Task @relation(fields: [taskId], references: [id])
  @@id([tagId, taskId])
}

model SubTask {
  id         String  @id @default(uuid())
  isComplete Boolean
  content    String
  taskId     String
  task       Task    @relation(fields: [taskId], references: [id])
}

model Comment {
  id      String @id @default(uuid())
  content String
  taskId  String
  task    Task @relation(fields: [taskId], references: [id])
}

model File {
  id        String @id @default(uuid())
  fileName  String
  url       String
  taskId    String
  task      Task   @relation(fields: [taskId], references: [id])
}
